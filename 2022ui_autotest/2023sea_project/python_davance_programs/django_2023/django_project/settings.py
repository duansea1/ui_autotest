"""
Django settings for django_project project.

Generated by 'django-admin startproject' using Django 4.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
from rest_framework.settings import APISettings

# Build paths inside the project like this: BASE_DIR / 'subdir'.
import rest_framework.filters
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-_3&rs34xi0mn%er=6u5_!zjo7@&#&_p0vkhy_yes=-fis*l)$v'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# 指定允许使用哪些地址访问当前系统
ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',  # 内容类型框架。
    'django.contrib.sessions',   # 消息框架
    'django.contrib.messages',
    'django.contrib.staticfiles',  # 静态文件管理框架
    # 注册项目
    'rest_framework',
    'myappsea',
    'interfaces',
    'users'
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'django_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'django_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases
# 指定在全局配置setting.py中的DATABASES字典配置需要链接的数据库信息
DATABASES = {
    # 指定数据库的别名/标签
    'default': {
            # 指定当前使用的数据库引擎，支持mysql、oracle、sqllite3
            # 需要安装 >pip install mysqlclient -i http://mirrors.aliyun.com/pypi/simple --trusted-host mirrors.aliyun.com
            'ENGINE': 'django.db.backends.mysql',
            # 指定数据库的名称，如果使用的是sqllite3，需要指定sqllite2文件的绝对路径
            'NAME': 'mydjango',
            'USER': 'root',
            'PASSWORD': 'root',
            'HOST': '127.0.0.1',
            'POST': '3306'
    },
    'product': {
                'ENGINE': 'django.db.backends.mysql',
                'NAME': 'product',
                'USER': 'root',
                'PASSWORD': 'root',
                'HOST': 'localhost',
                'POST': '3306'
        }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/
# 修改django展示语言为中文
LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# DRF的解析器
REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': ['rest_framework.filters.SearchFilter',
                                'rest_framework.filters.OrderingFilter'],
    # 'SEARCH_PARAM':'se',
    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'DEFAULT_PAGINATION_CLASS': 'utils.pagination.PageNumberPagination',
    'PAGE_SIZE': 3,
    # 指定用于支持coreapi的Schema
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
    # 指定使用的认证类
    # a、在全局指定默认的认证类
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # 支持session认证
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication'
    ],
    # 在全局指定默认的权限类（当认证通过后，可以获取何种权限）
    'DEFAULT_PERMISSION_CLASSES': [
        # AllowAny不管是否有认证成功，都能获取所有权限
        # IsAdminUser-管理员具备所有权限
        # IsAuthenticatedOrReadOnly，如果登录就具备所有权限，不登录，只有读取权限
        # IsAuthenticated

        'rest_framework.permissions.IsAuthenticated',
    ],

}

import os

# 确保日志文件的路径存在
LOG_DIR = os.path.join(BASE_DIR, 'logs')
if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR)

# 日志文件的完整路径
LOG_FILE = os.path.join(LOG_DIR, 'myappsea.log')

LOGGING = {
    # 指定日志版本
    'version': 1,
    'disable_existing_loggers': False,
    # 定义日志输出格式
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': LOG_FILE,
            'formatter': 'verbose'
        },
    },
    # 定义日志器的名称
    'loggers': {
        'myappsea': {  # 替换为你的应用名称
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

# 指定使用的用户模型类，默认是auth.User
AUTH_USER_MODEL = "users.UserModel"
